<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Vars
gamepad_set_axis_deadzone(0, 0.3);
dir = 1.5;
hspd = 0;
vspd = 0;
spd = 4;
delayTime = -1;
still = true;
//Music
global.MusicRuns = 0;
global.Music = "";
instance_create(obj_player.x, obj_player.y, obj_hotbar);
instance_create(obj_player.x, obj_player.y, obj_inventory);
scr_resources(); //Initializes Resources

//Player Stats
globalvar playerHp, playerSt, playerNm;
hpDelay = -1;
stDelay = -1;
stBuffer = false;
nmDelay = -1;

maxPlayerHp = 200;
playerHp = maxPlayerHp;
maxPlayerSt = 50;
playerSt = maxPlayerSt;
maxPlayerNm = 100;
playerNm = maxPlayerNm;

state = states.normal;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player States
switch (state) 
{
    case states.normal: scr_player_normal(); break;
    case states.attackFist: scr_player_attackFist(); break;
    case states.attackAxe: scr_player_attackAxe(); break;
    
}

scr_player_stats();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Stats
hp = (playerHp / maxPlayerHp) * 100;
st = (playerSt / maxPlayerSt) * 100;
nm = (playerNm / maxPlayerNm) * 100;
dispWidth = view_wview[0];
dispHeight = view_hview[0];

display_set_gui_size(dispWidth, dispHeight);
//126x26 healthbar size
draw_healthbar(dispWidth * (0.25/10), dispHeight * (0.5/10), dispWidth * (2.2/10), dispHeight * (0.85/10), hp, c_black, c_silver, c_red, 0, false, true); //Health
draw_healthbar(dispWidth * (0.25/10), dispHeight * (1/10), dispWidth * (2.2/10), dispHeight * (1.35/10), st, c_black, c_silver, c_green, 0, false, true); //Stamina
draw_healthbar(dispWidth * (0.25/10), dispHeight * (1.5/10), dispWidth * (2.2/10), dispHeight * (1.85/10), nm, c_black, c_silver, c_orange, 0, false, true); //Hunger


draw_sprite(spr_health, 0, dispWidth * (0.25/10), dispHeight * (0.5/10));
draw_sprite(spr_stamina, 0, dispWidth * (0.25/10), dispHeight * (1/10));
draw_sprite(spr_hunger, 0, dispWidth * (0.25/10), dispHeight * (1.5/10)); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
